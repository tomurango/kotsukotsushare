const { onCall } = require("firebase-functions/v2/https");
const functions = require("firebase-functions");
const axios = require("axios");
const { db, FieldValue, model, PERSPECTIVE_API_KEY } = require("../../config");

// üîç Perspective API „Çí‰Ωø„Å£„Å¶ TOXICITY „ÇíÊ§úÂá∫
async function checkToxicity(text) {
  const response = await axios.post(
    "https://commentanalyzer.googleapis.com/v1alpha1/comments:analyze",
    {
      comment: { text },
      languages: ["ja"],
      requestedAttributes: { TOXICITY: {} },
    },
    {
      params: { key: PERSPECTIVE_API_KEY },
    }
  );

  const score = response.data.attributeScores.TOXICITY.summaryScore.value;
  return score;
}

// ü§ñ GeminiÔºàChatGPTÁõ∏ÂΩìÔºâ„ÅßËß£Á≠î„ÅÆÂ¶•ÂΩìÊÄß„ÇíÂà§ÂÆö
async function validateWithAI(questionText, answerText) {
  const instruction = `Ê¨°„ÅÆÊñáÁ´†„Åå„ÄåË≥™ÂïèÔºà${questionText}Ôºâ„Äç„ÅÆ„ÄåÈÅ©Âàá„Å™Ëß£Á≠î„Äç„Å®„Åó„Å¶ÊàêÁ´ã„Åó„Å¶„ÅÑ„Çã„ÅãÂà§ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇÈÅ©Âàá„Å™„Çâ„ÄåOK„Äç„ÄÅÊÑèÂë≥„Åå‰∏çÊòéÁû≠„Å™„Çâ„ÄåNG„Äç„ÄÅ‰∏çÈÅ©Âàá„Å™„Çâ„ÄåREVIEW„Äç„ÄÇ`;

  const response = await model.generateContent({
    systemInstruction: instruction,
    contents: [{ role: "user", parts: [{ text: answerText }] }],
  });

  const raw = response.response.candidates?.[0]?.content?.parts?.[0]?.text?.trim();
  return raw;
}

// üî• Cloud FunctionsÊú¨‰Ωì
exports.addAnswer = onCall(async (request) => {
  try {
    const { questionId, answerText, questionText } = request.data;
    const userId = request.auth.uid;

    if (!userId) {
      throw new functions.https.HttpsError("unauthenticated", "User is not authenticated");
    }

    if (!questionId || !answerText || !questionText) {
      throw new functions.https.HttpsError("invalid-argument", "Invalid request data");
    }

    // 1. Perspective„ÅßÊö¥Ë®Ä„ÉÅ„Çß„ÉÉ„ÇØ
    const toxicity = await checkToxicity(answerText);
    const toxicityIsOK = toxicity < 0.7;

    // 2. Gemini„ÅßÂÜÖÂÆπ„ÉÅ„Çß„ÉÉ„ÇØ
    const aiResult = await validateWithAI(questionText, answerText);
    const aiResultNormalized = aiResult?.trim()?.toUpperCase();

    // 3. status „ÇíÊù°‰ª∂„Å´Âøú„Åò„Å¶Ê±∫ÂÆö
    let status = "approved";

    if (!toxicityIsOK || aiResultNormalized === "NG") {
      status = "rejected";
    } else if (aiResultNormalized === "REVIEW") {
      status = "pending_review";
    }

    // 4. Firestore„Å´‰øùÂ≠ò
    const answerDocId = `${questionId}_${userId}`;
    await db
      .collection("questions")
      .doc(questionId)
      .collection("answers")
      .doc(answerDocId)
      .set({
        text: answerText,
        createdBy: userId,
        createdAt: FieldValue.serverTimestamp(),
        toxicityScore: toxicity,
        aiCheckResult: aiResult,
        status,
      });

    return { message: "ÂõûÁ≠î„ÇíËøΩÂä†„Åó„Åæ„Åó„Åü" };
    /*return {
      message: reviewRequired
        ? "ÂÜÖÂÆπ„Å´ÂïèÈ°å„ÅÆÂèØËÉΩÊÄß„Åå„ÅÇ„Çã„Åü„ÇÅÁ¢∫Ë™ç„ÅåÂøÖË¶Å„Åß„Åô"
        : "ÂõûÁ≠î„ÇíËøΩÂä†„Åó„Åæ„Åó„Åü",
      toxicity,
      aiResult,
      reviewRequired,
    };*/



  } catch (error) {
    console.error("‚ùå ÂõûÁ≠î„ÅÆËøΩÂä†„Å´Â§±Êïó:", error);
    throw new functions.https.HttpsError("internal", error.message || "Internal server error");
  }
});
